package com.qihancloud;import java.io.DataInputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.UnsupportedEncodingException;import java.net.Socket;import java.net.UnknownHostException;import java.util.ArrayList;import java.util.Base64;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.log4j.Logger;import redis.clients.jedis.Jedis;import com.common.ByteUtil;import com.common.Common;import com.common.GetFileInfo;import com.common.OSSFile;import com.constant.Commands;import com.factory.MsgFactory;import com.google.protobuf.InvalidProtocolBufferException;import com.msg.HandleMsg;import com.msg.MSgCallBack;import com.msg.Msg;import com.msg.MsgHeader;import com.qihancloud.proto.MsgDefine;import com.qihancloud.proto.MsgDefine.msg_down_file_rsp;import com.qihancloud.proto.MsgDefine.msg_finish_up_file_rsp;import com.qihancloud.proto.MsgDefine.msg_up_file_rsp;import com.test.tools.Login;import com.test.tools.Tools;import com.test.tools.ToolsLogic;public class QiHanServer implements MSgCallBack {	private OutputStream outputStream;	private InputStream in;	public Socket tcpSocket;	private DataInputStream dataInputStream;	private Msg msg_m;//	public String token;// 登录token	public int srcUid;// 登录的id	public int sendUid;// 发送方id	@SuppressWarnings("rawtypes")	public Map map;// 消息	public int seq=1;//消息序号	public ArrayList<String> msg_list;// 存储接收的消息	public int offline_count=1;//初始离线消息数量	public boolean is_done = true;	public String account;	public String pwd;	public String type;// 设备类型	public volatile Thread keepHeartThread;	public volatile Thread reciveThread;	public KeepHeart KeepheartRunable;	public Map<Integer, String> remark_map;//存放好友昵称	private static Logger logger = Logger.getLogger(QiHanServer.class);	public String ip;	public int port;	/**	 * @param ip	 * @param port	 */	public QiHanServer(String account,String type) {				this.srcUid=0;		this.account = account;		this.type = type;		msg_list = new ArrayList<String>();		remark_map=new HashMap<Integer, String>();		}		/**	 * 	 * @param user_name	 * @param pwd	 * @param type	 */	public void gw_account_login_req() {		MsgDefine.gw_account_login_req.Builder builder = MsgDefine.gw_account_login_req				.newBuilder();		builder.setAppId(srcUid).setType(type).setAccount(account)				.setPassWord(pwd);		MsgDefine.gw_account_login_req login_req = builder.build();		byte[] send_body_msg = login_req.toByteArray();		// setHeader		MsgHeader send_head = MsgFactory.setMsgHeader();		send_head.setCommand(Commands.CMD_GW_ACCOUNT_LOGIN_REQ);		send_head.setLength(send_body_msg.length);		send_head.setFrag_len((short) send_body_msg.length);		byte[] head_bytes = MsgFactory.toByteArray(send_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		// send data		try {			outputStream.write(msg);			outputStream.flush();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		Common.sleepTime(100);			}		/**	 * 	 * @param recv_body_msg	 * @return 	 */	// CMD_GW_ACCOUNT_LOGIN_RSP 0x20626 登录响应	public boolean gw_account_login_rsp(byte[]body_msg) {				System.err.println("login_rsp:"+body_msg.length);				MsgDefine.gw_account_login_rsp account_login_rsp = null;		// recv_body		try {			account_login_rsp = MsgDefine.gw_account_login_rsp.parseFrom(body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return false;		}		if(account_login_rsp.getErrorCode().equals(MsgDefine.error_code_e.RC_OK)){			srcUid = account_login_rsp.getUid();//初始化srcUid			token = account_login_rsp.getToken();//初始化token			logger.debug(srcUid+" qlink account login success:" + token);			//ToolsLogic.appendText(srcUid+" qlink_account login success\n");			map = new HashMap<>();			map.put(Commands.CMD_GW_ACCOUNT_LOGIN_RSP, account_login_rsp);			return true;		}		else{			logger.error(srcUid+" qlink account login fail:" + account_login_rsp.getDesc());			Login.actiontarget.setText(account_login_rsp.getDesc());			System.err.println(account_login_rsp.getDesc());			return false;		}								}	//qlink登陆	public boolean login(String pwd) {		this.pwd=pwd;		Sel_Access sel_access = new Sel_Access(account, type);		ip=sel_access.ip;		port=sel_access.port;		try {			tcpSocket = new Socket(ip,port);			outputStream = tcpSocket.getOutputStream();			in = tcpSocket.getInputStream();			dataInputStream = new DataInputStream(in);		} catch (UnknownHostException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e){			// TODO Auto-generated catch block			e.printStackTrace();		}				gw_account_login_req();				msg_m = new Msg(this);		msg_m.receive();		int i=0;		while (msg_m.body_from_s.length==0){			Common.sleepTime(100);			msg_m.receive();			i++;			if (i>100){				logger.error("login rsp timeout");				break;			}		}					int reason_code=MsgFactory.byteArrayToMsgHeader(msg_m.head_from_s).getReason_code();		if (reason_code!=0&&reason_code!=3){			logger.error(account+" login reason_code:"+reason_code);			if (Tools.ta==null){				Login.actiontarget.setText(account+" login reason_code:"+reason_code);			}			else{				ToolsLogic.appendText(account+" login reason_code:"+reason_code);			}			return false;		}				boolean rsp_flag=gw_account_login_rsp(msg_m.body_from_s);						if (rsp_flag){						KeepheartRunable = new KeepHeart(msg_m);			keepHeartThread = new Thread(KeepheartRunable);			keepHeartThread.setDaemon(true);			keepHeartThread.start();						reciveThread = new Thread(new ReceiveRunnable(msg_m));			reciveThread.setDaemon(true);			reciveThread.start();			return true;		}		return false;	}				// CMD_GW_DEV_ACCOUNT_LOGIN_REQ 设备登录请求	public void gw_dev_account_login_req(String account) {				MsgDefine.gw_dev_account_login_req.Builder builder = MsgDefine.gw_dev_account_login_req				.newBuilder();		builder.setAppId(srcUid).setType(type).setAccount(account).setIMEI("device login");		MsgDefine.gw_dev_account_login_req login_req = builder.build();		byte[] send_body_msg = login_req.toByteArray();		// setHeader		MsgHeader send_head = MsgFactory.setMsgHeader();		send_head.setCommand(Commands.CMD_GW_DEV_ACCOUNT_LOGIN_REQ);		send_head.setLength(send_body_msg.length);		send_head.setFrag_len((short) send_body_msg.length);		byte[] head_bytes = MsgFactory.toByteArray(send_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		// send data		try {			outputStream.write(msg);			outputStream.flush();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}		// CMD_GW_DEV_ACCOUNT_LOGIN_RSP 设备登录响应 	public boolean gw_dev_account_login_rsp(byte[]body_msg) {		MsgDefine.gw_dev_account_login_rsp dev_login_rsp = null;		// recv_body		try {			dev_login_rsp = MsgDefine.gw_dev_account_login_rsp.parseFrom(body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		if(dev_login_rsp.getErrorCode().equals(MsgDefine.error_code_e.RC_OK)){			srcUid = dev_login_rsp.getUid();//初始化srcUid			token = dev_login_rsp.getToken();//初始化token			logger.debug(srcUid+"dev login success:" + token);			map = new HashMap<>();			map.put(Commands.CMD_GW_DEV_ACCOUNT_LOGIN_RSP, dev_login_rsp);			return true;		}		else{			logger.error(srcUid+" qlink account login fail:" + dev_login_rsp.getDesc());			System.err.println(dev_login_rsp.getDesc());			return false;					}			}			//设备登陆	public boolean login() {				Sel_Access sel_access = new Sel_Access(account, type);		ip=sel_access.ip;		port=sel_access.port;		try {			tcpSocket = new Socket(ip,port);			outputStream = tcpSocket.getOutputStream();			in = tcpSocket.getInputStream();			dataInputStream = new DataInputStream(in);		} catch (UnknownHostException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e){			// TODO Auto-generated catch block			e.printStackTrace();		}		gw_dev_account_login_req(account);				msg_m = new Msg(this);		msg_m.receive();		int i=0;		while (msg_m.body_from_s.length==0){			Common.sleepTime(100);			msg_m.receive();			i++;			if (i>100){				logger.error("login rsp timeout");				break;			}		}		int reason_code=MsgFactory.byteArrayToMsgHeader(msg_m.head_from_s).getReason_code();		if (reason_code!=0){			System.err.println(account+" login reason_code:"+reason_code);			ToolsLogic.appendText(account+" login reason_code:"+reason_code);			return false;		}		if(gw_dev_account_login_rsp(msg_m.body_from_s)){			KeepheartRunable = new KeepHeart(msg_m);			keepHeartThread = new Thread(KeepheartRunable);			keepHeartThread.setDaemon(true);			keepHeartThread.start();			reciveThread = new Thread(new ReceiveRunnable(msg_m));			reciveThread.setDaemon(true);			reciveThread.start();			return true;		}		return false;	}	/**	 * 退出登录	 */	// CMD_GW_ACCOUNT_LOGOUT_REQ	public void gw_account_logout_req() {		MsgDefine.gw_account_logout_req.Builder builder = MsgDefine.gw_account_logout_req				.newBuilder();		System.out.println(account+"-"+type+srcUid+"  "+token);		builder.setAccount(account).setType(type).setAppId(srcUid)				.setToken(token);		MsgDefine.gw_account_logout_req logout_req = builder.build();		byte[] send_body_msg = logout_req.toByteArray();		// setHeader		MsgHeader send_head = MsgFactory.setMsgHeader();		send_head.setCommand(Commands.CMD_GW_ACCOUNT_LOGOUT_REQ);		send_head.setLength(send_body_msg.length);		send_head.setFrag_len((short) send_body_msg.length);		send_head.setSrc_user_id(this.srcUid);		byte[] head_bytes = MsgFactory.toByteArray(send_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		// send data		msg_m.sendMsg(msg);	}			// CMD_GW_ACCOUNT_LOGOUT_RSP	public void gw_account_logout_rsp(byte[] msg_body) {		/*		MsgDefine.gw_account_logout_rsp rsp = null;		try {			rsp = MsgDefine.gw_account_logout_rsp.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		*/		}		public void logout(){		if (type.equals("qlink_id")){			gw_account_logout_req();		}		else{			keepHeartThread.stop();			reciveThread.stop();		}		/*		try {			tcpSocket.close();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}*/	}		//CMD_GW_ACCOUNT_LOGIN_SMS_QUERY_REQ  登录验证码请求	public void account_login_sms_req(String tel){		 MsgDefine.gw_account_login_sms_query_req.Builder builder=MsgDefine.gw_account_login_sms_query_req.newBuilder();		 builder.setAppId(srcUid).setType(type).setAccount(account).setTel(tel);		 MsgDefine.gw_account_login_sms_query_req req=builder.build();		 byte[] send_body_msg = req.toByteArray();			// setHeader		MsgHeader send_head = MsgFactory.setMsgHeader();		send_head.setCommand(Commands.CMD_GW_ACCOUNT_LOGIN_SMS_QUERY_REQ);		send_head.setLength(send_body_msg.length);		send_head.setFrag_len((short) send_body_msg.length);		byte[] head_bytes = MsgFactory.toByteArray(send_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		// send data		try {			outputStream.write(msg);			outputStream.flush();			Common.sleepTime(200);		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	// CMD_GW_ACCOUNT_LOGIN_SMS_QUERY_RSP 登录验证码响应	public boolean account_login_sms_rsp(byte[] msg_body){		MsgDefine.gw_account_login_sms_query_rsp rsp = null;		try {			rsp=MsgDefine.gw_account_login_sms_query_rsp.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				if(rsp.getErrorCode().equals(MsgDefine.error_code_e.RC_OK)){			logger.debug(rsp.getErrorCode());//RC_OK  RC_SERVER_BUSY			logger.debug("send sms success "+rsp.getDesc());//sms send success  sms send is limit 5 times.			return true;		}		else{			logger.error(rsp.getErrorCode());//RC_OK  RC_SERVER_BUSY			logger.error("send sms fail "+rsp.getDesc());//sms send success  sms send is limit 5 times.			return false;		}	}		//CMD_GW_ACCOUNT_SMS_LOGIN_REQ	public void gw_account_sms_login_req(String tel,String identify_code){				MsgDefine.gw_account_sms_login_req.Builder builder=MsgDefine.gw_account_sms_login_req.newBuilder();		builder.setAppId(srcUid).setType(type).setAccount(account).setIdentifyCode(identify_code).setTel(tel).setPassWord(pwd);		MsgDefine.gw_account_sms_login_req req=builder.build();		byte[] send_body_msg = req.toByteArray();		// setHeader		MsgHeader send_head = MsgFactory.setMsgHeader();		send_head.setCommand(Commands.CMD_GW_ACCOUNT_SMS_LOGIN_REQ);		send_head.setLength(send_body_msg.length);		send_head.setFrag_len((short) send_body_msg.length);		byte[] head_bytes = MsgFactory.toByteArray(send_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		// send data		try {			outputStream.write(msg);			outputStream.flush();			Common.sleepTime(200);		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}		//CMD_GW_ACCOUNT_SMS_LOGIN_RSP	public void gw_account_sms_login_rsp(byte[] msg_body){		MsgDefine.gw_account_sms_login_rsp rsp = null;		try {			rsp=MsgDefine.gw_account_sms_login_rsp.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				map = new HashMap<>();		map.put(Commands.CMD_GW_ACCOUNT_SMS_LOGIN_RSP, rsp);		srcUid=rsp.getUid();		token=rsp.getToken();			}		//qlink验证码登陆	public boolean code_login(String pwd) {		int redis_port;		this.pwd=pwd;		try {			tcpSocket = new Socket(ip,port);			outputStream = tcpSocket.getOutputStream();			in = tcpSocket.getInputStream();			dataInputStream = new DataInputStream(in);		} catch (UnknownHostException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e){			// TODO Auto-generated catch block			e.printStackTrace();		}		if (ip.equals("58.60.230.238")){			redis_port=6278;		}		else{			redis_port=6279;		}		Jedis jedis = new Jedis(ip, redis_port);		jedis.auth("qhkj_redis_987");		String uid=jedis.get("user_info:qlink_id_"+account);		String tel=jedis.hget("user_info:"+uid,"tel");		account_login_sms_req(tel);		msg_m = new Msg(this);		msg_m.receive();		System.out.println(msg_m.body_from_s.length);		if (account_login_sms_rsp(msg_m.body_from_s)){			String identify_code =jedis.get("expire_valid:"+tel+"_login_identify_code");			gw_account_sms_login_req(tel,identify_code);			msg_m.receive();			gw_account_sms_login_rsp(msg_m.body_from_s);			KeepheartRunable = new KeepHeart(msg_m);			keepHeartThread = new Thread(KeepheartRunable);			keepHeartThread.start();			reciveThread = new Thread(new ReceiveRunnable(msg_m));			reciveThread.start();			return true;		}		return false;	}					// CMD_ACCOUNT_FORCE_LOGOUT_RSP 强制下线响应	public void account_force_logout_rsp(){		MsgDefine.account_force_logout_rsp.Builder builder=MsgDefine.account_force_logout_rsp.newBuilder();		builder.setDesc("not login").setErrorCode(MsgDefine.error_code_e.RC_OK);		MsgDefine.account_force_logout_rsp force_logout_rsp=builder.build();		byte[] msg_body = force_logout_rsp.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_FORCE_LOGOUT_RSP);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		msg_header.setDst_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg,10);			}			/**	 * CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_REQ 增加好友请求,是如果对方已经是好友则客户端不会受到任何信息	 * 	 * @param dstUid	 *            查询的id	 * @param des	 * @return	 */	public void account_relationship_add_ask_req(int dstUid, String des) {		// 消息体		MsgDefine.account_relationship_add_ask_req add_ask_req = MsgDefine.account_relationship_add_ask_req.newBuilder()				.setSrcUid(srcUid).setSrcToken(token).setDstUid(dstUid).setAppId(srcUid).setDsc(des).build();		byte[] msg_body = add_ask_req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);	}		//CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_RSP	public void account_relationship_add_ask_rsp(byte[] msg_body){				MsgDefine.account_relationship_add_ask_rsp rsp=null;		try {			rsp=MsgDefine.account_relationship_add_ask_rsp.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		logger.info(rsp.getErrorCode());		map.put(Commands.CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_RSP,rsp);			}			// CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_ONLINE_SEND_2_PEER_REQ 增加好友消息请求 //对端在线时，逻辑层向对端主动发送【增加好友消息】	public void account_relationship_add_ask_online_send_2_peer_req(byte[] msg_body){		MsgDefine.account_relationship_add_ask_online_send_2_peer_req req = null;		System.err.println(msg_body.length);		try {			req = MsgDefine.account_relationship_add_ask_online_send_2_peer_req					.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				map.put(Commands.CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_ONLINE_SEND_2_PEER_REQ, req);		logger.debug(req.getAskedUid()+"收到" + req.getAskUid() + "的添加好友请求");		ToolsLogic.appendText(req.getAskedUid()+"收到" + req.getAskUid() + "的添加好友请求;     ");				account_relationship_add_ask_online_send_2_peer_rsp(req.getMsgId());		}		// CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_ONLINE_SEND_2_PEER_RSP 增加好友消息响应		public void account_relationship_add_ask_online_send_2_peer_rsp(int msg_id){		MsgDefine.account_relationship_add_ask_online_send_2_peer_rsp.Builder builder=MsgDefine.account_relationship_add_ask_online_send_2_peer_rsp.newBuilder();		builder.setErrorCode(MsgDefine.error_code_e.RC_OK).setDesc("receive").setMsgId(msg_id).setUid(srcUid);		MsgDefine.account_relationship_add_ask_online_send_2_peer_rsp rsp=builder.build();		byte[] msg_body=rsp.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_RELATIONSHIP_ADD_ASK_ONLINE_SEND_2_PEER_RSP);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		msg_header.setDst_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);			}		/**	 * CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_REQ 增加好友应答请求	 * 	 * @param answerType	 *            0/1,表示接受/拒绝	 * @param askUid	 *            ,请求申请加为好友的ID	 * @param msgId	 */	public void account_msg_relationship_add_answer_req(int answerType, int askUid, int answerUid,int msgId,int devUid) {				MsgDefine.account_msg_relationship_add_answer_req.Builder builder=MsgDefine.account_msg_relationship_add_answer_req.newBuilder();			builder.setAnswerType(answerType).setAnswerUid(answerUid).setAppId(srcUid).setAskUid(askUid).setMsgId(msgId);		if (devUid!=0){			builder.setDevUid(devUid);		}		MsgDefine.account_msg_relationship_add_answer_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid); // 发送消息方的ID		msg_header.setDst_svr_seq((short) 0);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg_to_s = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg_to_s);		logger.debug(srcUid+"同意"+askUid+"添加好友请求");		ToolsLogic.appendText(srcUid+"同意"+askUid+"添加好友请求\n");					}		//CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_RSP 		public void account_msg_relationship_add_answer_rsp(byte[]msg_body){			MsgDefine.account_msg_relationship_add_answer_rsp rsp = null;			try {				rsp = MsgDefine.account_msg_relationship_add_answer_rsp						.parseFrom(msg_body);			} catch (InvalidProtocolBufferException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}						map.put(Commands.CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_RSP, rsp);		}				// CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_SEND_2_PEER_REQ 应答结果请求 //服务器主动推送给客户端	public void account_msg_relationship_add_answer_send_2_peer_req(byte[] msg_body){				MsgDefine.account_msg_relationship_add_answer_send_2_peer_req req=null;		try {			req=MsgDefine.account_msg_relationship_add_answer_send_2_peer_req.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				int ask_id=req.getAskUid();		int msg_id=req.getMsgId();		map.put(Commands.CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_SEND_2_PEER_REQ, req);				logger.debug(srcUid+" 收到对方已同意请求");		logger.debug("ask_id:"+ask_id+" msg_id:"+msg_id);		account_msg_relationship_add_answer_send_2_peer_rsp(ask_id,msg_id);	}			// CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_SEND_2_PEER_RSP  应答结果响应   		//客户端响应服务器	public void account_msg_relationship_add_answer_send_2_peer_rsp(int ask_id,int msg_id){		MsgDefine.account_msg_relationship_add_answer_send_2_peer_rsp.Builder builder=MsgDefine.account_msg_relationship_add_answer_send_2_peer_rsp.newBuilder();		builder.setErrorCode(MsgDefine.error_code_e.RC_OK);		builder.setDesc("receive").setAskUid(ask_id).setMsgId(msg_id);				MsgDefine.account_msg_relationship_add_answer_send_2_peer_rsp rsp=builder.build();		byte[] msg_body = rsp.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ANSWER_SEND_2_PEER_RSP);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid); // 发送消息方的ID		msg_header.setDst_user_id(srcUid); // 发送消息方的ID		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg_to_s = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg_to_s);			}		// CMD_ACCOUNT_RELATIONSHIP_MESSAGE_ADD_ASK_QUERY_REQ 【好友消息查询】请求	public void account_relationship_message_add_ask_query_req(){		MsgDefine.account_relationship_message_add_ask_query_req add_ask_query_req =MsgDefine.account_relationship_message_add_ask_query_req.newBuilder()				.setAppId(srcUid).setUid(srcUid).setToken(token).build();		byte[] msg_body=add_ask_query_req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_RELATIONSHIP_MESSAGE_ADD_ASK_QUERY_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);				byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);			}		// CMD_ACCOUNT_RELATIONSHIP_MESSAGE_ADD_ASK_QUERY_RSP 【好友消息查询】响应	public void account_relationship_message_add_ask_query_rsp(byte[]msg_body){		MsgDefine.account_relationship_message_add_ask_query_rsp ask_query_rsp=null;		MsgDefine.account_msg_relationship_add_ask_list asl = null;		try {			ask_query_rsp = MsgDefine.account_relationship_message_add_ask_query_rsp 					.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				int add_friend_count=ask_query_rsp.getMsgListCount();		System.out.println(add_friend_count);		int[] msg_id_list=new int[add_friend_count];		for (int i=0;i<add_friend_count;i++){			MsgDefine.account_msg_relationship_add_ask_list add_ask_list=ask_query_rsp.getMsgList(i);						 try {				asl=MsgDefine.account_msg_relationship_add_ask_list.parseFrom(add_ask_list.toByteArray());							} catch (InvalidProtocolBufferException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			int askUid=asl.getAskUid();			int answerUid=asl.getAskedUid();			int msgId=asl.getMsgId();			int devUid=asl.getDevUid();			System.out.println(askUid);			System.out.println(answerUid);			System.out.println( msgId);			System.out.println(devUid);			System.out.println(asl.getDsc());			msg_id_list[i]=msgId;			account_msg_relationship_add_answer_req(1, askUid, answerUid,msgId,devUid);		}				map.put(Commands. CMD_ACCOUNT_RELATIONSHIP_MESSAGE_ADD_ASK_QUERY_RSP , ask_query_rsp);				account_msg_relationship_add_ask_delete_req(msg_id_list);	}		// CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ASK_DELETE_REQ 删除【请求好友消息】记录请求	public void account_msg_relationship_add_ask_delete_req(int []msg_id_list){				MsgDefine.account_msg_relationship_add_ask_delete_req.Builder bulider=MsgDefine.				account_msg_relationship_add_ask_delete_req.newBuilder();		bulider.setUid(srcUid).setAppId(srcUid).setToken(token);				for (int i=0;i<msg_id_list.length;i++){			bulider.addMsgIdList(msg_id_list[i]);		}				MsgDefine.account_msg_relationship_add_ask_delete_req req=bulider.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_MSG_RELATIONSHIP_ADD_ASK_DELETE_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);			}		public void account_msg_relationship_add_ask_delete_rsp(byte[]msg_body){				MsgDefine.account_msg_relationship_add_ask_delete_rsp rsp = null;				try {			rsp = MsgDefine.account_msg_relationship_add_ask_delete_rsp 					.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				System.out.println("delete ask :"+rsp.getErrorCode());	    System.out.println("delete ask :"+rsp.getDesc());	}				/**	 * CMD_ACCOUNT_RELATIONSHIP_DELETE_REQ 删除好友请求	 * 	 * @param dstUid	 * @return	 */	public void account_relationship_delete_req(int dstUid) {		// 消息体		MsgDefine.account_relationship_delete_req add_ask_req = MsgDefine.account_relationship_delete_req.newBuilder()				.setSrcUid(srcUid).setSrcToken(token).setDstUid(dstUid).setAppId(srcUid).build();		byte[] msg_body = add_ask_req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_RELATIONSHIP_DELETE_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		msg_header.setDst_svr_seq((short) 0);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		ToolsLogic.appendText(srcUid+"请求服务器删除好友"+dstUid+";     ");		msg_m.sendMsg(msg);			}	//CMD_ACCOUNT_RELATIONSHIP_DELETE_REQ 删除好友响应		public void account_relationship_delete_rsp(byte[]msg_body) {		MsgDefine.account_relationship_delete_rsp rsp = null;		try {			rsp = MsgDefine.account_relationship_delete_rsp 					.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		map.put(Commands.CMD_ACCOUNT_RELATIONSHIP_DELETE_REQ , rsp);			    System.out.println("delete friends :"+rsp.getDesc());	    ToolsLogic.appendText(srcUid+"删除好友成功\n");		}				/**	 *  CMD_ACCOUNT_RELATIONSHIP_QUERY_REQ 好友关系查询请求	 * 	 * @param dstUid	 * @return 如果是好友返回true,否则返回false	 */	public void account_relationship_query_req() {		// 消息体		MsgDefine.account_relationship_query_req req = MsgDefine.account_relationship_query_req.newBuilder().setAppId(srcUid)				.setUid(srcUid).build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_RELATIONSHIP_QUERY_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		msg_header.setDst_svr_seq((short) 0);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);					}	//CMD_ACCOUNT_RELATIONSHIP_QUERY_REQ 好友关系查询响应	public void account_relationship_query_rsp(byte[]msg_body){		MsgDefine.account_relationship_query_rsp query_rsp = null;		try {			query_rsp = MsgDefine.account_relationship_query_rsp					.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		map.put(Commands.CMD_ACCOUNT_RELATIONSHIP_QUERY_RSP, query_rsp);	}		public boolean account_relationship_query(int dstUid){				account_relationship_query_req();		Common.sleepTime(100);		MsgDefine.account_relationship_query_rsp query_rsp = (MsgDefine.account_relationship_query_rsp) map				.get(Commands.CMD_ACCOUNT_RELATIONSHIP_QUERY_RSP);		//System.out.println(query_rsp.getListUserIdList());		List<Integer> fuid_list=query_rsp.getListUserIdList();		if(fuid_list.contains(dstUid)){			//ToolsLogic.appendText(srcUid+"和"+dstUid+"已经是好友关系\n");			return true;		}		//ToolsLogic.appendText(srcUid+"和"+dstUid+"不是好友关系\n");		return false;	}				/**	 * CMD_ACCOUNT_UID_QUERY_REQ 根据帐号查询uid请求	 * 	 * @param accout	 * @param type	 * @param appid	 * @return	 */	public void account_uid_query_req(String account, String type) {				MsgDefine.account_uid_query_req req = MsgDefine.account_uid_query_req				.newBuilder().setAccount(account).setAppId(srcUid)				.setType(type).build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_ACCOUNT_UID_QUERY_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);	}	// CMD_ACCOUNT_UID_QUERY_RSP 根据帐号查询uid响应	public void account_uid_query_rsp(byte[] recv_body_msg) {		MsgDefine.account_uid_query_rsp rsp = null;		try {			rsp = MsgDefine.account_uid_query_rsp.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		map.put(Commands.CMD_ACCOUNT_UID_QUERY_RSP, rsp);	}		public int account_uid_query(String account, String type){		account_uid_query_req(account,type);		MsgDefine.account_uid_query_rsp rsp=(com.qihancloud.proto.MsgDefine.account_uid_query_rsp) map.get(Commands.CMD_ACCOUNT_UID_QUERY_RSP);		int uid = rsp.getUid();		logger.debug("qurey uid" + uid);		return uid;			}	// CMD_GW_ACCOUNT_FRI_BASE_INFO_QUERY_REQ	public void base_info_query_req(int[] uid_list) {		MsgDefine.account_friend_base_info_query_req.Builder builder = MsgDefine.account_friend_base_info_query_req				.newBuilder();		builder.setAppId(srcUid).setUid(srcUid).setToken(token);		for (int uid : uid_list) {			builder.addFuidList(uid);		}		MsgDefine.account_friend_base_info_query_req req = builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_GW_ACCOUNT_FRI_BASE_INFO_QUERY_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);	}	// CMD_GW_ACCOUNT_FRI_BASE_INFO_QUERY_RSP 查询好友基本信息响应	public void account_friend_base_info_query_rsp(byte[] body_msg) {		MsgDefine.account_friend_base_info_query_rsp rsp = null;		try {			rsp = MsgDefine.account_friend_base_info_query_rsp					.parseFrom(body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		int count = rsp.getBaseInfoCount();		ArrayList base_info_list=new ArrayList();		for (int i = 0; i < count; i++) {			MsgDefine.friend_base_info base_info = rsp.getBaseInfo(i);			int uid = base_info.getFriendUid();			String account = base_info.getAccount();			// System.err.println(account);			base_info_list.add(base_info);		}		map.put(Commands.CMD_GW_ACCOUNT_FRI_BASE_INFO_QUERY_RSP, base_info_list);	}		// CMD_GW_ACCOUNT_FRI_REMARKS_DATA_WRITE_REQ 设置好友备注	public void gw_account_fri_remarks_data_write_req(int fuid,String remarks){		//protobuf		MsgDefine.account_msg_friend_remarks_write_req.Builder builder=MsgDefine.account_msg_friend_remarks_write_req.newBuilder();		builder.setAppId(srcUid).setUid(srcUid).setToken(token).setFriendUserId(fuid).setRemarks(remarks);		MsgDefine.account_msg_friend_remarks_write_req req=builder.build();		byte[]send_body_msg=req.toByteArray();		//head		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_GW_ACCOUNT_FRI_REMARKS_DATA_WRITE_REQ);		msg_header.setSrc_user_id(srcUid);		msg_header.setLength(send_body_msg.length);		msg_header.setFrag_len((short) send_body_msg.length);		byte[] head_bytes = MsgFactory.toByteArray(msg_header);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		//send msg		msg_m.sendMsg(msg);		}		//CMD_GW_ACCOUNT_FRI_REMARKS_DATA_WRITE_RSP	public void gw_account_fri_remarks_data_write_rsp(byte[]msg_body){		MsgDefine.account_msg_friend_remarks_write_rsp rsp=null;		try {			rsp=MsgDefine.account_msg_friend_remarks_write_rsp.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		map.put(Commands.CMD_GW_ACCOUNT_FRI_REMARKS_DATA_WRITE_RSP, rsp);	}		//CMD_GW_ACCOUNT_FRI_REMARKS_INFO_QUERY_REQ 查询好友备注信息请求		public void  gw_account_fri_remarks_info_query_req(int []fuid_list){		MsgDefine.account_friend_remarks_info_query_req.Builder builder=MsgDefine. account_friend_remarks_info_query_req.newBuilder();		builder.setAppId(srcUid).setUid(srcUid).setToken(token);		for(int fuid:fuid_list){			builder.addFuidList(fuid);		}			MsgDefine.account_friend_remarks_info_query_req req=builder.build();		byte[]send_body_msg=req.toByteArray();		//head		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_GW_ACCOUNT_FRI_REMARKS_INFO_QUERY_REQ);		msg_header.setSrc_user_id(srcUid);		msg_header.setLength(send_body_msg.length);		msg_header.setFrag_len((short) send_body_msg.length);		byte[] head_bytes = MsgFactory.toByteArray(msg_header);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		//send msg		msg_m.sendMsg(msg);				}		//CMD_GW_ACCOUNT_FRI_REMARKS_INFO_QUERY_RSP 查询好友备注信息响应    0x20718	public void  gw_account_fri_remarks_info_query_rsp(byte []msg_body){		MsgDefine.account_friend_remarks_info_query_rsp rsp=null;				try {			 rsp=MsgDefine.account_friend_remarks_info_query_rsp.parseFrom(msg_body);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		int count=rsp.getRemarksInfoCount();		for(int i=0;i<count;i++){			MsgDefine.friend_remarks_info remarks_info=rsp.getRemarksInfo(i);			int uid=remarks_info.getFriendUid();			String remark=remarks_info.getRemarks();			remark_map.put(uid,remark);		}		}			/**	 * CMD_CLIENT_CHAT_MSG_REQ 0x10401 客户端请求服务器发送消息	 * 	 * @param text	 * @param dst_user_id	 */	public void client_chat_msg_req(int type, String text, int dst_user_id) {		String data_base64;		seq += 1;		MsgDefine.chat_message.Builder builder1 = MsgDefine.chat_message				.newBuilder();		builder1.setSeq(seq).setDate(0).setUsec(0).setSrcUserId(srcUid)				.setDstUserId(dst_user_id).setEncrypt(0).setType(type)				.setSrcGroupId(0).setDstGroupId(0);		try {			String data_utf8 = new String(text.getBytes("GBK"), "UTF-8");			data_base64 = Base64.getEncoder().encodeToString(data_utf8.getBytes("utf-8"));			builder1.setDatas(data_base64);		} catch (UnsupportedEncodingException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		switch (type) {		case 0:			logger.debug(srcUid+" send text message to "+dst_user_id);			ToolsLogic.appendText(srcUid+" send text to "+dst_user_id+":---->"+text+"\n");						break;		case 2:			logger.debug(srcUid+" send pic message to "+dst_user_id);			ToolsLogic.appendText(srcUid+" send pic to "+dst_user_id+":---->"+text+"\n");			break;		case 4:			logger.debug(srcUid+" send voice message to "+dst_user_id);			ToolsLogic.appendText(srcUid+" send voice  to "+dst_user_id+":---->"+text+"\n");			break;		}		// protobuf		MsgDefine.message_clientChatMsgReq.Builder builder2 = MsgDefine.message_clientChatMsgReq				.newBuilder();		builder2.setMsg(builder1);		MsgDefine.message_clientChatMsgReq client_msg_req = builder2.build();		byte[] send_body_msg = client_msg_req.toByteArray();				//head		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_CLIENT_CHAT_MSG_REQ);		msg_header.setSrc_user_id(srcUid);		msg_header.setDst_user_id(dst_user_id);		msg_header.setMsg_seq((long) seq);		msg_header.setLength(send_body_msg.length);		msg_header.setFrag_len((short) send_body_msg.length);		byte[] head_bytes = MsgFactory.toByteArray(msg_header);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		//send msg		msg_m.sendMsg(msg);	}	/**	 * define CMD_CLIENT_PULL_MSG_REQ 0x10405 客户端拉取离线消息请求	 * 	 */	public void client_pull_msg_req() {		// protobuf		MsgDefine.message_rev_read_req.Builder builder = MsgDefine.message_rev_read_req				.newBuilder();		builder.setUserId(srcUid).setCount(10);		MsgDefine.message_rev_read_req client_recv_read_msg_req = builder				.build();		byte[] send_body_msg = client_recv_read_msg_req.toByteArray();		// head		MsgHeader recv_msg_head = MsgFactory.setMsgHeader();		recv_msg_head.setCommand(Commands.CMD_CLIENT_PULL_MSG_REQ);		recv_msg_head.setLength(send_body_msg.length);		recv_msg_head.setFrag_len((short) send_body_msg.length);		recv_msg_head.setSrc_user_id(srcUid);		byte[] head_bytes = MsgFactory.toByteArray(recv_msg_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		// DataInputStream in = new DataInputStream(socket.getInputStream());		msg_m.sendMsg(msg);	}	/**	 * define CMD_CLIENT_PULL_MSG_RSP 0x10406 客户端拉取离线消息响应	 * 	 * @param recv_body_msg	 */	public void client_pull_msg_rsp(byte[] recv_body_msg) {		int seq_value;		MsgDefine.message_send_write_req unread_msg = null;		MsgDefine.chat_message unread_chat_msg = null;		try {			unread_msg = MsgDefine.message_send_write_req					.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		offline_count = unread_msg.getUnreadMsgCount();		if (offline_count==0){		logger.debug("count:" + offline_count);				}		int[] seq = new int[offline_count];		for (int i = 0; i < offline_count; i++) {			MsgDefine.chat_message u1 = unread_msg.getUnreadMsg(i);			try {				unread_chat_msg = MsgDefine.chat_message.parseFrom(u1						.toByteArray());			} catch (InvalidProtocolBufferException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			seq_value = unread_chat_msg.getSeq();			logger.debug("seq_value:" + seq_value);			message_handel(unread_chat_msg);			seq[i] = seq_value;		}		if (offline_count != 0) {			client_update_msg_req(seq);		}	}		/**	 * CMD_CLIENT_UPDATE_MSG_REQ 0x10407 客户端请求服务器收到消息(离线)	 * @param seq	 */	// #define CMD_CLIENT_UPDATE_MSG_REQ 0x10407 客户端请求服务器收到消息(离线)		public void client_update_msg_req(int[] seq) {		MsgDefine.message_rev_del_req.Builder builder = MsgDefine.message_rev_del_req				.newBuilder();		builder.setUserId(srcUid);		for (int i = 0; i < seq.length; i++) {			builder.addSeq(seq[i]);		}		MsgDefine.message_rev_del_req rev_del_req = builder.build();		byte[] send_body_msg = rev_del_req.toByteArray();		MsgHeader update_msg_head = MsgFactory.setMsgHeader();		update_msg_head.setCommand(Commands.CMD_CLIENT_UPDATE_MSG_REQ);		update_msg_head.setLength(send_body_msg.length);		update_msg_head.setFrag_len((short) send_body_msg.length);		//update_msg_head.setDst_user_id(srcUid);		update_msg_head.setSrc_user_id(srcUid);		byte[] head_bytes = MsgFactory.toByteArray(update_msg_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		msg_m.sendMsg(msg);	}	/**	 * CMD_CLIENT_UPDATE_MSG_RSP 0x10408 客户端收到离线消息响应	 */	public static void client_update_msg_rsp() {		logger.debug("CMD_CLIENT_UPDATE_MSG_RSP");	}			/**	 * 接收所有离线消息	 */	public void recv_offline_message() {				while (offline_count!=0) {			logger.debug("offline_count...."+offline_count);			client_pull_msg_req();			Common.sleepTime(200);			}				}	/**	 * CMD_MSG_CHAT_CLIENT_REQ 0x10403 message请求client转发聊天（监听服务器请求，客户端做出回应）	 * 监听在线消息	 * @param head	 * @param recv_body_msg	 */	public void msg_chat_client_req(MsgHeader head, byte[] recv_body_msg) {		int seq_value;		MsgDefine.message_msgChatClientReq msg_chat = null;		MsgDefine.chat_message unread_chat_msg = null;		try {			msg_chat = MsgDefine.message_msgChatClientReq					.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		int count = msg_chat.getUnreadMsgCount();		logger.debug("chat count:" + count);		int[] seq = new int[count];		for (int i = 0; i < count; i++) {			MsgDefine.chat_message u1 = msg_chat.getUnreadMsg(i);			try {				unread_chat_msg = MsgDefine.chat_message.parseFrom(u1						.toByteArray());			} catch (InvalidProtocolBufferException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			seq_value = unread_chat_msg.getSeq();			logger.debug("seq_value:" + seq_value);			message_handel(unread_chat_msg);			seq[i] = seq_value;		}		msg_chat_client_rsp(seq, head);			}	/**	 * // CMD_MSG_CHAT_CLIENT_RSP 0x10404 （在线）//客户端回应服务器收到在线消息	 * @param seq	 * @param head	 */	public void msg_chat_client_rsp(int[] seq, MsgHeader head) {		MsgDefine.message_rev_del_req.Builder builder = MsgDefine.message_rev_del_req		.newBuilder();		builder.setUserId(srcUid);		for (int i = 0; i < seq.length; i++) {			builder.addSeq(seq[i]);		}		MsgDefine.message_rev_del_req rev_del_req = builder.build();		byte[] send_body_msg = rev_del_req.toByteArray();		MsgHeader update_msg_head = head;		update_msg_head.setCommand(Commands.CMD_MSG_CHAT_CLIENT_RSP);		update_msg_head.setLength(send_body_msg.length);		update_msg_head.setFrag_len((short) send_body_msg.length);		update_msg_head.setDst_user_id(srcUid);		update_msg_head.setSrc_user_id(srcUid);		byte[] head_bytes = MsgFactory.toByteArray(update_msg_head);		// write_length		byte[] msg = MsgFactory.commbindhead_body(send_body_msg, head_bytes);		msg_m.sendMsg(msg);		}		/**	 * 	 * @param unread_chat_msg	 *            对收到的消息分类处理	 */	public void message_handel(MsgDefine.chat_message unread_chat_msg) {		String msg = null;		int src_uid = unread_chat_msg.getSrcUserId();		int dst_uid = unread_chat_msg.getDstUserId();		int type = unread_chat_msg.getType();		int date = unread_chat_msg.getDate();		int usec = unread_chat_msg.getUsec();		String formats = "yyyy-MM-dd HH:mm:ss";		Long timestamp = (long) (date) * 1000;		String send_time = new java.text.SimpleDateFormat(formats)				.format(new Date(timestamp));		logger.debug("msg_type:" + type);		String datas = unread_chat_msg.getDatas();		byte[] asBytes = Base64.getDecoder().decode(datas);		try {			msg = new String(asBytes, "utf-8");		} catch (UnsupportedEncodingException e) {			e.printStackTrace();		}		if (src_uid == sendUid) {			this.msg_list.add(msg);			}				switch (type) {		case 0:			logger.debug(send_time+":"+dst_uid+" recv "+src_uid+" a text: "+msg+"\n");			ToolsLogic.appendText(send_time+":"+dst_uid+" recv text from "+src_uid+"---->"+msg+"\n");			break;		case 2:			logger.debug(send_time+":"+dst_uid+" recv "+src_uid+" a pic: "+msg+"\n");			ToolsLogic.appendText(send_time+":"+dst_uid+" recv pic from "+src_uid+"---->"+msg+"\n");			break;		case 4:			logger.debug(send_time+":"+dst_uid+" recv "+src_uid+" a voice: "+msg+"\n");			ToolsLogic.appendText(send_time+":"+dst_uid+" recv voice from "+src_uid+"---->"+msg+"\n");			break;		}	}		//CMD_GW_ACCOUNT_QUERY_REQ	public void gw_account_query_req(String query_type){		MsgDefine.gw_account_query_req.Builder builder=MsgDefine.gw_account_query_req.newBuilder();		builder.setAppId(srcUid).setType(type).setAccount(account).setPassWord("25d55ad283aa400af464c76d713c07ad").setQueryType(query_type);		MsgDefine.gw_account_query_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_GW_ACCOUNT_QUERY_REQ );		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);	}		//CMD_GW_ACCOUNT_QUERY_RSP	public void gw_account_query_rsp(byte[] recv_body_msg){		MsgDefine.gw_account_query_rsp rsp=null;		try {			rsp=MsgDefine.gw_account_query_rsp.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		map.put(Commands.CMD_GW_ACCOUNT_QUERY_RSP, rsp);			}		// CMD_GW_ACCOUNT_MODIFY_REQ 帐号修改请求	public void gw_account_modify_req(String modify_type,String value){		MsgDefine.gw_account_modify_req.Builder builder =MsgDefine.gw_account_modify_req.newBuilder();		builder.setAppId(srcUid).setType(type).setAccount(account).setPassword(pwd).setModifytype(modify_type).setValue(value);		MsgDefine.gw_account_modify_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_GW_ACCOUNT_MODIFY_REQ );		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);			}	// CMD_GW_ACCOUNT_MODIFY_RSP 帐号修改响应	public void gw_account_modify_rsp(byte[] recv_body_msg){		MsgDefine.gw_account_modify_rsp rsp=null;		/*		try {			rsp=MsgDefine.gw_account_modify_rsp.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		map.put(Commands.CMD_GW_ACCOUNT_MODIFY_RSP, rsp);		*/	}		// CMD_GW_DEV_ACCOUNT_MODIFY_REQ 帐号修改请求gw_account_modify_req	public void  gw_dev_account_modify_req(String type,String value){		MsgDefine.gw_dev_account_modify_req.Builder builder =MsgDefine.gw_dev_account_modify_req.newBuilder();		builder.setAppId(srcUid).setUid(srcUid).setModifytype(type).setValue(value).setToken(token).setImei("QEYDU16A21000775");		MsgDefine.gw_dev_account_modify_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_GW_DEV_ACCOUNT_MODIFY_REQ );		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);			}	// CMD_GW_DEV_ACCOUNT_MODIFY_RSP 帐号修改响应	public void  gw_dev_account_modify_rsp(byte[] recv_body_msg){				MsgDefine.gw_dev_account_modify_rsp rsp = null;				try {			rsp=MsgDefine.gw_dev_account_modify_rsp.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		logger.debug("帐号修改响应"+rsp.getDesc());		logger.debug("帐号修改响应"+rsp.getErrorCode());					}			//	//#define CMD_UP_FILE_REQ 	public void cmd_up_file_req(String file_path,int type,int dstUid){				GetFileInfo file_info=new GetFileInfo(file_path);		MsgDefine.msg_up_file_req.Builder builder=MsgDefine.msg_up_file_req.newBuilder();		builder.setUserId(srcUid).setDstUserId(dstUid).setFileMd5(file_info.file_md5)		.setFileType(type).setFileName(file_info.file_name).setFileSize(file_info.file_size);		MsgDefine.msg_up_file_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_UP_FILE_REQ );		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		msg_header.setDst_user_id(dstUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);			}		//#define CMD_UP_FILE_RSP	public void cmd_up_file_rsp(byte[] recv_body_msg){		MsgDefine.msg_up_file_rsp rsp=null;		try {			rsp=MsgDefine.msg_up_file_rsp.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				logger.debug("Exist:"+rsp.getExist());		logger.debug("file_id:"+rsp.getFileId());		logger.debug("UpUrl:"+rsp.getUpUrl());		logger.debug("FileMd5:"+rsp.getFileMd5());		logger.debug("FileType:"+rsp.getFileType());		logger.debug("DstUserId:"+rsp.getDstUserId());		map.put(Commands.CMD_UP_FILE_RSP, rsp);			}		//#define CMD_FINISH_UP_FILE_REQ  		public void cmd_finish_up_file_req(String file_path,int type){		GetFileInfo file_info=new GetFileInfo(file_path);		MsgDefine.msg_finish_up_file_req.Builder builder=MsgDefine.msg_finish_up_file_req.newBuilder();		builder.setFileMd5(file_info.file_md5).setFileType(type).setCancelFlag(0);		MsgDefine.msg_finish_up_file_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_FINISH_UP_FILE_REQ );		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);					}		//#define CMD_FINISH_UP_FILE_RSP 		public void cmd_finish_up_file_rsp(byte[] recv_body_msg){		MsgDefine.msg_finish_up_file_rsp  rsp=null;		try {			rsp=MsgDefine.msg_finish_up_file_rsp.parseFrom(recv_body_msg);		} catch (InvalidProtocolBufferException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		int dst_user_id=rsp.getDstUserId();		logger.debug("finish up file :"+rsp.getFileId());				map.put(Commands.CMD_FINISH_UP_FILE_RSP , rsp);	}		public long up_file_to_server(String file_path,int type,int dstUid){		long file_id;		cmd_up_file_req(file_path,type,dstUid);		MsgDefine.msg_up_file_rsp rsp1=(msg_up_file_rsp) map.get(Commands.CMD_UP_FILE_RSP);		if (rsp1.getExist()==0){			String up_url=rsp1.getUpUrl();			try {				OSSFile.uploadFileByHttpPut(up_url,file_path);				Common.sleepTime(1000);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			cmd_finish_up_file_req(file_path,type);			Common.sleepTime(200);			MsgDefine.msg_finish_up_file_rsp rsp2=(msg_finish_up_file_rsp) map.get(Commands.CMD_FINISH_UP_FILE_RSP);			file_id=rsp2.getFileId();		}		else{			file_id=rsp1.getFileId();		}		return file_id;	}		//#define CMD_DOWN_FILE_REQ    	public void cmd_down_file_req(long file_id,int file_type){		MsgDefine.msg_down_file_req.Builder builder=MsgDefine.msg_down_file_req.newBuilder();		builder.setUserId(srcUid).setFileId(file_id).setFileType(file_type).setThumbnails(0);		MsgDefine.msg_down_file_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_DOWN_FILE_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);	}		//#define CMD_DOWN_FILE_RSP    		public void cmd_down_file_rsp(byte[] recv_body_msg){			MsgDefine.msg_down_file_rsp rsp=null;			try {				rsp=MsgDefine.msg_down_file_rsp.parseFrom(recv_body_msg);			} catch (InvalidProtocolBufferException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}						logger.debug("DownUrl:"+rsp.getDownUrl());			logger.debug("FileMd5:"+rsp.getFileMd5());			logger.debug("FileName:"+rsp.getFileName());			logger.debug("FileSize:"+rsp.getFileSize());			logger.debug("FileId:"+rsp.getFileId());			logger.debug("Thumbnails:"+rsp.getThumbnails());						map.put(Commands.CMD_DOWN_FILE_RSP ,rsp);					}		//#define CMD_FINISH_DOWN_FILE_REQ 	public void cmd_finish_down_file_req(long file_id){		MsgDefine.msg_finish_down_file_req.Builder builder=MsgDefine.msg_finish_down_file_req.newBuilder();		builder.setFileId(file_id).setThumbnails(0).setCancelFlag(0);		MsgDefine.msg_finish_down_file_req req=builder.build();		byte[] msg_body = req.toByteArray();		int msg_body_len = msg_body.length;		// 消息头		MsgHeader msg_header = MsgFactory.setMsgHeader();		msg_header.setCommand(Commands.CMD_FINISH_DOWN_FILE_REQ);		msg_header.setLength(msg_body_len);		msg_header.setFrag_len((short) msg_body_len);		msg_header.setSrc_user_id(srcUid);		byte[] msgh_bytes = MsgFactory.toByteArray(msg_header);		// 合并消息头和消息体		byte[] msg = MsgFactory.commbindhead_body(msg_body, msgh_bytes);		msg_m.sendMsg(msg);	}		//#define CMD_FINISH_DOWN_FILE_RSP	public void cmd_finish_down_file_rsp(MsgHeader head){		int reason_code=head.getReason_code();		if (reason_code==0){		logger.debug("finish download_file");		}		else{			logger.error("download_file fail"+reason_code);		}	}			public void down_file_from_server(long file_id,int file_type,String file_path){		Common.sleepTime(1000);		cmd_down_file_req(file_id,file_type);		Common.sleepTime(1000);		MsgDefine.msg_down_file_rsp rsp=(msg_down_file_rsp) map.get(Commands.CMD_DOWN_FILE_RSP);		String down_url=rsp.getDownUrl();		logger.debug("down_url:"+down_url);		OSSFile.getNetWorkBitmap(down_url,file_path);		Common.sleepTime(2000);		cmd_finish_down_file_req(file_id);	}		@Override	public void call(MsgHeader header, byte[] msg_body) {				HandleMsg.handle(header,msg_body,this);	}}